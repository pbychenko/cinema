import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { Layout, Spin, Alert, Input, Tabs, Pagination } from 'antd';
import { AndroidOutlined, AppleOutlined } from '@ant-design/icons';
import 'antd/dist/reset.css';
import CustomHeader from '../components/CustomHeader';
import Cards from '../components/Cards';
import axios from "axios";
import routes from '../routes';

const { Content, Footer } = Layout;
const { Search } = Input;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const SearchPage = () => {
  const [moviePage, setMoviePage] = useState(1);
  const [tvPage, setTvPage] = useState(1);
  const [searchResultsMovieData, setSearchResultsMovieData] = useState([]);
  const [searchResultsTvData, setSearchResultsTvData] = useState([]);
  const [totalMovieResults, setTotalMovieResults] = useState(0);
  const [totalTvResults, setTotalTvResults] = useState(0);
  const [activeTab, setActiveTab] = useState('movie');
  const [searchInput, setSearchInput] = useState('');
  const [showLoad, setShowLoad] = useState(false);
  const [showError, setShowError] = useState(false);

  const onSearch = async(value) => {
    setSearchInput(() => value);
    console.log('input', searchInput);
  };

  const onTabChange = (key) => {
    setActiveTab(key);
  }; 

  useEffect(() => {
    const getSearchMovieResultsData = async(pageNumber) => {
      console.log('start Movie')
      if (searchInput === '') return;
  
      const searchMovieResultsUrl = routes.getSearchResultsPath('movie', searchInput, pageNumber);
      setShowLoad(true);
      try {
        const res = await axios.get(searchMovieResultsUrl);
        const { results, total_results: totalResults } = res.data;
        setSearchResultsMovieData(() => results.map((el) => ({ ...el, 'media_type': 'movie' })));
        setTotalMovieResults(() => totalResults);
        setShowLoad(false);
        setShowError(false);
      } catch (e) {
        console.log('error', e);
        setShowError(true);
        setShowLoad(false);      
      }    
      console.log('stop')
    };

    getSearchMovieResultsData(moviePage);
    console.log('in useef1')
  }, [searchInput, moviePage]);

  useEffect(() => {
    const getSearchTvResultsData = async(pageNumber) => {
      console.log('start tv search')
      if (searchInput === '') return;
    
      const searchTvResultsUrl = routes.getSearchResultsPath('tv', searchInput, pageNumber);
      setShowLoad(true);
      try {
        const res = await axios.get(searchTvResultsUrl);
        const { results, total_results: totalResults } = res.data;
        setSearchResultsTvData(() => results.map((el) => ({ ...el, 'media_type': 'tv' })));
        setTotalTvResults(() => totalResults);
        setShowLoad(false);
        setShowError(false);
      } catch (e) {
        console.log('error', e);
        setShowError(true);
        setShowLoad(false);      
      }    
      console.log('stop tv');
    };
    getSearchTvResultsData(tvPage)
    console.log('in useef2')
  }, [searchInput, tvPage]);

  const onMoviePaginationChange = (current) => {
    setMoviePage(current);
  };

  const onTvPaginationChange = (current) => {
    console.log('jee')
    setTvPage(current);
  };
  
  return (
    <Layout>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CustomHeader />
       <Content
        className='main-content'
      >
        <Layout
          className='main-layout'
        >
          <Search
            placeholder="input search text"
            onSearch={onSearch}
            className='search'
          />
          <Tabs
            defaultActiveKey={activeTab}
            centered
            onChange={onTabChange}
            items={[
              {
                label: (<span><AppleOutlined />Movies</span>),
                key: 'movie',
                children: (
                 <>
                  {(showLoad && !showError) ? (
                    <Spin tip="Loading" size="large">
                      <div className="content" />
                    </Spin>): null}
                  {(!showLoad && showError) ? (
                    <Alert
                      message="Что пошло не так"
                      description="Попробуйте перезагрузить страницу чуть позже"
                      type="error"
                    />
                  ): null}
                  {(!showLoad && !showError) ? (
                    <>
                      <Cards data={searchResultsMovieData} />
                      <Pagination
                          current={moviePage}
                          onChange={onMoviePaginationChange}
                          total={totalMovieResults}
                          pageSize = {20}
                          className='pagination' />
                    </>): null}
                 </> 
                 ),
              },
              {
                label: (<span><AndroidOutlined />TV</span>),
                key: 'tv',
                children: (
                  <>
                    {(showLoad && !showError) ? (
                      <Spin tip="Loading" size="large">
                        <div className="content" />
                      </Spin>): null}
                    {(!showLoad && showError) ? (
                      <Alert
                        message="Что пошло не так"
                        description="Попробуйте перезагрузить страницу чуть позже"
                        type="error"
                      />
                    ): null}
                    {(!showLoad && !showError) ? (
                      <>
                        <Cards data={searchResultsTvData} />
                        <Pagination
                            current={tvPage}
                            onChange={onTvPaginationChange}
                            total={totalTvResults}
                            pageSize = {20}
                            className='pagination' />
                      </>): null}
                  </>),
              }]}
          />
        </Layout>
      </Content>
      <Footer>
        Cinema ©2022 Created by pavl1k
      </Footer>
    </Layout>
  );
};

export default SearchPage;
