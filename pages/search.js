import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import 'antd/dist/reset.css';
import axios from "axios";
import CustomHeader from '../components/CustomHeader';
import Cards from '../components/Cards';
import { Layout, theme, Spin, Input, Tabs, Pagination } from 'antd';
import routes from '../routes';
import { AndroidOutlined, AppleOutlined } from '@ant-design/icons';

const { Content, Footer } = Layout;
const { Search } = Input;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const SearchPage = () => {
  const [moviePage, setMoviePage] = useState(1);
  const [tvPage, setTvPage] = useState(1);
  const [searchResultsMovieData, setSearchResultsMovieData] = useState([]);
  const [searchResultsTvData, setSearchResultsTvData] = useState([]);
  const [totalMovieResults, setTotalMovieResults] = useState(0);
  const [totalTvResults, setTotalTvResults] = useState(0);
  const [activeTab, setActiveTab] = useState('movie');
  const [searchInput, setSearchInput] = useState('');
  // const [load, setLoad] = useState(false);
  // const [showError, setShowError] = useState(false);

  const {
    token: { colorBgContainer },
  } = theme.useToken();


  const onSearch = async(value) => {
    setSearchInput(() => value);
    console.log('input', searchInput);
  }

  const onTabChange = (key) => {
    // console.log(key)
    setActiveTab(key)
  }

  const getSearchMovieResultsData = async(pageNumber) => {
    console.log('start Movie')
    if (searchInput === '') return;
    const searchMovieResultsUrl = routes.getSearchResultsPath('movie', searchInput, pageNumber);
    const searchMovieResultsRes = await axios.get(searchMovieResultsUrl);
    setSearchResultsMovieData(() => searchMovieResultsRes.data.results.map((el) => ({ ...el, 'media_type': 'movie' })));
    setTotalMovieResults(searchMovieResultsRes.data.total_results);
    console.log('stop')
  }

  const getSearchTvResultsData = async(pageNumber) => {
    console.log('start')
    if (searchInput === '') return;
    const searchTvResultsUrl = routes.getSearchResultsPath('tv', searchInput, pageNumber);
    const searchTvResultsRes = await axios.get(searchTvResultsUrl); 
    setSearchResultsTvData(() => searchTvResultsRes.data.results.map((el) => ({ ...el, 'media_type': 'tv' })));
    setTotalTvResults(searchTvResultsRes.data.total_results);
    console.log('stop') 
  };

  useEffect(() => {
    getSearchMovieResultsData(moviePage)
    console.log('in useef1')
  }, [searchInput, moviePage]);

  useEffect(() => {
    getSearchTvResultsData(tvPage)
    console.log('in useef2')
  }, [searchInput, tvPage]);

  const onMoviePaginationChange = (current) => {
    setMoviePage(current);
  };

  const onTvPaginationChange = (current) => {
    console.log('jee')
    setTvPage(current);
  };
  
  return (
    <Layout>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CustomHeader />
      {/* <Spin tip="Loading" size="large">
        <div className="content" />
      </Spin> */}
       <Content
        className='main-content'
      >
        <Layout
          className='main-layout'
        >
          <Search
            placeholder="input search text"
            onSearch={onSearch}
            className='search'
          />
          <Tabs
            defaultActiveKey={activeTab}
            centered
            onChange={onTabChange}
            items={[
              {
                label: (<span><AppleOutlined />Movies</span>),
                key: 'movie',
                children: (
                 <>
                  <Cards data={searchResultsMovieData} />
                  <Pagination
                    current={moviePage}
                    onChange={onMoviePaginationChange}
                    total={totalMovieResults}
                    pageSize = {20}
                    className='pagination' />
                 </>),
              },
              {
                label: (<span><AndroidOutlined />TV</span>),
                key: 'tv',
                children: (
                  <>
                  <Cards data={searchResultsTvData} />
                  <Pagination
                    current={tvPage}
                    onChange={onTvPaginationChange}
                    total={totalTvResults}
                    pageSize = {20}
                    className='pagination' />
                  </>),
              }]}
          />
        </Layout>
      </Content>
      <Footer>
        Cinema Â©2022 Created by pavl1k
      </Footer>
    </Layout>
  );
};

export default SearchPage;
