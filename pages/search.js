import React, { useState, useEffect } from 'react';
// import { getTrendingData } from '../api';
import Head from 'next/head';
import 'antd/dist/reset.css';
import axios from "axios";
import CustomHeader from '../components/CustomHeader';
import Cards from '../components/Cards';
import { Layout, theme, Spin, Input, Tabs } from 'antd';
import routes from '../routes';
import { AndroidOutlined, AppleOutlined } from '@ant-design/icons';

const { Content, Footer } = Layout;
const { Search } = Input;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const SearchPage = () => {
  const [page, setPage] = useState(1);
  const [searchResultsMovieData, setSearchResultsMovieData] = useState([]);
  const [searchResultsTvData, setSearchResultsTvData] = useState([]);
  const [activeTab, setActiveTab] = useState('tv');
  const [searchInput, setSearchInput] = useState('');
  // const [load, setLoad] = useState(false);
  // const [showError, setShowError] = useState(false);

  const {
    token: { colorBgContainer },
  } = theme.useToken();

  const onSearch = async(value) => {
    console.log(value)
    setSearchInput((prev) => value);
    console.log('searchInput', searchInput)
    await getSearchResultsData(page, value);
  }

  const onTabChange = (key) => {
    // console.log(key)
    setActiveTab(key)
  }

  const getSearchResultsData = async(pageNumber, s) => {
    const searchMovieResultsUrl = routes.getSearchResults('movie', s, pageNumber);
    const searchMovieResultsRes = await axios.get(searchMovieResultsUrl);

    setSearchResultsMovieData(() => searchMovieResultsRes.data.results.map((el) => ({ ...el, 'media_type': 'movie' })));
    // console.log(searchResultsMovieData)

    const searchTvResultsUrl = routes.getSearchResults('tv', s, pageNumber);
    const searchTvResultsRes = await axios.get(searchTvResultsUrl); 
    setSearchResultsTvData(() => searchTvResultsRes.data.results.map((el) => ({ ...el, 'media_type': 'tv' })));
    // console.log('here') 
  }

  // const openCard = async (id) => {
  //   let mediaObj = trendingData.filter((el) => el.id === id)[0];
  //   const videosUrl = routes.getVideosPath(mediaObj.media_type, id);
  //   const actorsUrl = routes.getActorsPath(mediaObj.media_type, id);
  //   const videoRes = await axios.get(videosUrl);
  //   const actorsRes = await axios.get(actorsUrl);
  //   const videoLink = videoRes.data.results[0].key;
  //   const actorsData = actorsRes.data.cast.slice(0, 10);
  //   mediaObj = { ...mediaObj, videoLink, acrotrsData: actorsData };

  //   setActiveItemData(mediaObj);
  //   // try {
  //     // const res = await axios.get(uri);
  //     // setActivePictureData(res.data);
  //     setShowModal(true);
  //   // } catch (error) {
  //   //   setShowErrorBlock(true);
  //   //   throw error;
  //   // }   
  // };

  // useEffect(() => {
  //   console.log('here')
  //   getTrendingData(page)
  //   // console.log('here')
  // }, [page]);

  const onPaginationChange = async(current) => {
    setPage(current);
    await getTrendingData(current);
  };
  
  return (
    <Layout>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CustomHeader />
      {/* <Spin tip="Loading" size="large">
        <div className="content" />
      </Spin> */}
       <Content
        style={{
          padding: '0 50px',
        }}
      >
        <Layout
          style={{
            padding: '24px 0',
            background: colorBgContainer,
          }}
        >
          <Search
            placeholder="input search text"
            onSearch={onSearch}
            style={{
              width: 400,
              margin: 'auto'
            }}
          />
          <Tabs
            defaultActiveKey={activeTab}
            style={{
              margin: 'auto'
            }}
            onChange={onTabChange}
            items={[
              {
                label: (<span><AppleOutlined />Movies</span>),
                key: 'movie',
                children: (<Cards data={searchResultsMovieData} onPaginationChange={onPaginationChange} page={page} />),
              },
              {
                label: (<span><AndroidOutlined />TV</span>),
                key: 'tv',
                children: (<Cards data={searchResultsTvData} onPaginationChange={onPaginationChange} page={page} />),
              }]}
          />
          {/* {renderModal()} */}
        </Layout>
      </Content>
      <Footer style={{textAlign: 'center'}}>
        Cinema Â©2022 Created by pavl1k
      </Footer>
    </Layout>
  );
};

export default SearchPage;
